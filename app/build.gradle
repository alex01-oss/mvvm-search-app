import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.hilt)
    alias(libs.plugins.ksp)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.kotlin.serialization)
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

def localKeystorePath = localProperties.getProperty('KEYSTORE_PATH') ?: ""
def localKeyAlias = localProperties.getProperty('KEY_ALIAS') ?: ""
def localKeystorePassword = localProperties.getProperty('KEYSTORE_PASSWORD') ?: ""
def localKeyPassword = localProperties.getProperty('KEY_PASSWORD') ?: ""

android {
    namespace = 'com.loc.searchapp'
    compileSdk = 36

    defaultConfig {
        applicationId = "com.loc.searchapp"
        minSdk = 24
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        def youtubeApiKey = localProperties.getProperty('youtube.api.key') ?: ""
        buildConfigField("String", "YOUTUBE_API_KEY", "\"${youtubeApiKey}\"")

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    signingConfigs {
        create("release") {
            if (localKeystorePath && file(localKeystorePath).exists()) {
                storeFile file(localKeystorePath)
                storePassword localKeystorePassword
                keyAlias localKeyAlias
                keyPassword localKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled = false
        }
        release {
            minifyEnabled = true
            signingConfig = signingConfigs.getByName("release")
            proguardFiles(
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            )
        }
    }

    flavorDimensions = ["environment"]

    productFlavors {
        dev {
            dimension = "environment"
            applicationIdSuffix = ".dev"
            versionNameSuffix = "-dev"

            buildConfigField("String", "BASE_URL", "\"https://marketing4.taile27bf0.ts.net/api/\"")
            buildConfigField("Boolean", "ENABLE_LOGGING", "true")

            resValue("string", "app_name", "SearchApp DEV")
        }

        staging {
            dimension = "environment"
            applicationIdSuffix = ".staging"
            versionNameSuffix = "-staging"

            buildConfigField("String", "BASE_URL", "\"https://marketing4.taile27bf0.ts.net/api/\"")
            buildConfigField("Boolean", "ENABLE_LOGGING", "true")

            resValue("string", "app_name", "SearchApp STAGING")
        }

        prod {
            dimension = "environment"

            buildConfigField("String", "BASE_URL", "\"https://domain.com/api/\"")
            buildConfigField("Boolean", "ENABLE_LOGGING", "false")

            resValue("string", "app_name", "SearchApp")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    kotlin {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_21)
            freeCompilerArgs.addAll(['-XXLanguage:+PropertyParamAnnotationDefaultTargetMode'])
        }
    }

    buildFeatures {
        compose = true
        buildConfig = true
    }

    packaging {
        resources {
            exclude("META-INF/AL2.0")
            exclude("META-INF/LGPL2.1")
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.compose.bom))
    implementation(libs.bundles.compose)
    implementation(libs.compose.material.icons)
    implementation(libs.media3.common)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.espresso.core)
    androidTestImplementation(platform(libs.compose.bom))
    androidTestImplementation(libs.compose.ui.test.junit4)
    debugImplementation(libs.compose.ui.tooling)
    debugImplementation(libs.compose.ui.test.manifest)
    implementation(libs.splashscreen)
    implementation(libs.navigation.compose)
    implementation(libs.hilt.android)
    ksp(libs.hilt.compiler)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.bundles.network)
    implementation(libs.coil.compose)
    implementation(libs.bundles.storage)
    implementation(libs.bundles.paging)
    implementation(libs.richeditor.compose)
    implementation(libs.youtube.player)
}